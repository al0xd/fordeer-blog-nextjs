// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9NGHBNkQsbfExpj8Yvxqtb
// Component: t7k9WefTZ_z
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuItem from "../../MenuItem"; // plasmic-import: JGw0SFiyoQ/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: p9wv0BYsrZXV/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_react_blog.module.css"; // plasmic-import: 9NGHBNkQsbfExpj8Yvxqtb/projectcss
import * as sty from "./PlasmicHeader.module.css"; // plasmic-import: t7k9WefTZ_z/css

import Liogo1XsvgIcon from "./icons/PlasmicIcon__Liogo1Xsvg"; // plasmic-import: c_1pCl59N/icon
import LoupesvgIcon from "./icons/PlasmicIcon__Loupesvg"; // plasmic-import: sY_IQ68AQ/icon

export type PlasmicHeader__VariantMembers = {};

export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {
  logoImg?: React.ReactNode;
  homeUrl?: string | PageHref;
};

type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>(
  "logoImg",
  "homeUrl"
);

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  topBar?: p.Flex<"div">;
  logo?: p.Flex<"a"> & Partial<LinkProps>;
  logoImg?: p.Flex<"svg">;
  search?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  menu?: p.Flex<"div">;
  menuItem222?: p.Flex<"a"> & Partial<LinkProps>;
  menuItem2222?: p.Flex<"a"> & Partial<LinkProps>;
  menuItem2222222?: p.Flex<"a"> & Partial<LinkProps>;
  menuItem22222222?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHeaderProps {
  logoImg?: React.ReactNode;
  homeUrl?: string | PageHref;
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"topBar"}
        data-plasmic-override={overrides.topBar}
        className={classNames(defaultcss.all, sty.topBar)}
      >
        <p.PlasmicLink
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames(defaultcss.all, sty.logo)}
          component={Link}
          href={args.homeUrl !== undefined ? args.homeUrl : "/"}
          platform={"nextjs"}
        >
          <p.PlasmicSlot
            defaultContents={
              <Liogo1XsvgIcon
                data-plasmic-name={"logoImg"}
                data-plasmic-override={overrides.logoImg}
                className={classNames(defaultcss.all, sty.logoImg)}
                role={"img"}
              />
            }
            value={args.logoImg}
          />
        </p.PlasmicLink>

        <div
          data-plasmic-name={"search"}
          data-plasmic-override={overrides.search}
          className={classNames(defaultcss.all, sty.search)}
        >
          <LoupesvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"menu"}
        data-plasmic-override={overrides.menu}
        hasGap={true}
        className={classNames(defaultcss.all, sty.menu)}
      >
        <p.PlasmicLink
          className={classNames(defaultcss.all, sty.link__qwQ4C)}
          component={Link}
          href={"https://www.plasmic.app/" as const}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box___9OvQ9,
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("Menu Item" as const)
                : undefined
            )}
          >
            {"HOME"}
          </div>
        </p.PlasmicLink>

        <MenuItem
          className={classNames("__wab_instance", sty.menuItem__zkVxo)}
        />

        <p.PlasmicLink
          data-plasmic-name={"menuItem222"}
          data-plasmic-override={overrides.menuItem222}
          className={classNames(defaultcss.all, sty.menuItem222)}
          component={Link}
          href={"https://www.plasmic.app/" as const}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__gZg18
            )}
          >
            {"DEV"}
          </div>
        </p.PlasmicLink>

        <p.PlasmicLink
          data-plasmic-name={"menuItem2222"}
          data-plasmic-override={overrides.menuItem2222}
          className={classNames(defaultcss.all, sty.menuItem2222)}
          component={Link}
          href={"https://www.plasmic.app/" as const}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__qBPru
            )}
          >
            {"UI & UX"}
          </div>
        </p.PlasmicLink>

        <p.PlasmicLink
          data-plasmic-name={"menuItem2222222"}
          data-plasmic-override={overrides.menuItem2222222}
          className={classNames(defaultcss.all, sty.menuItem2222222)}
          component={Link}
          href={"https://www.plasmic.app/" as const}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__agcbz
            )}
          >
            {"ABOUT"}
          </div>
        </p.PlasmicLink>

        {(
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
        ) ? (
          <p.PlasmicLink
            data-plasmic-name={"menuItem22222222"}
            data-plasmic-override={overrides.menuItem22222222}
            className={classNames(defaultcss.all, sty.menuItem22222222)}
            component={Link}
            href={"https://www.plasmic.app/" as const}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__sm1Hw
              )}
            >
              {"ABOUT"}
            </div>
          </p.PlasmicLink>
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "topBar",
    "logo",
    "logoImg",
    "search",
    "svg",
    "menu",
    "menuItem222",
    "menuItem2222",
    "menuItem2222222",
    "menuItem22222222"
  ],
  topBar: ["topBar", "logo", "logoImg", "search", "svg"],
  logo: ["logo", "logoImg"],
  logoImg: ["logoImg"],
  search: ["search", "svg"],
  svg: ["svg"],
  menu: [
    "menu",
    "menuItem222",
    "menuItem2222",
    "menuItem2222222",
    "menuItem22222222"
  ],
  menuItem222: ["menuItem222"],
  menuItem2222: ["menuItem2222"],
  menuItem2222222: ["menuItem2222222"],
  menuItem22222222: ["menuItem22222222"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  topBar: "div";
  logo: "a";
  logoImg: "svg";
  search: "div";
  svg: "svg";
  menu: "div";
  menuItem222: "a";
  menuItem2222: "a";
  menuItem2222222: "a";
  menuItem22222222: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHeader__VariantsArgs;
  args?: PlasmicHeader__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topBar: makeNodeComponent("topBar"),
    logo: makeNodeComponent("logo"),
    logoImg: makeNodeComponent("logoImg"),
    search: makeNodeComponent("search"),
    svg: makeNodeComponent("svg"),
    menu: makeNodeComponent("menu"),
    menuItem222: makeNodeComponent("menuItem222"),
    menuItem2222: makeNodeComponent("menuItem2222"),
    menuItem2222222: makeNodeComponent("menuItem2222222"),
    menuItem22222222: makeNodeComponent("menuItem22222222"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
