// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9NGHBNkQsbfExpj8Yvxqtb
// Component: kGJfhqxpGYq
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: t7k9WefTZ_z/component
import BlogItem from "../../BlogItem"; // plasmic-import: u8bhd43jsV/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: p9wv0BYsrZXV/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_react_blog.module.css"; // plasmic-import: 9NGHBNkQsbfExpj8Yvxqtb/projectcss
import * as sty from "./PlasmicHome.module.css"; // plasmic-import: kGJfhqxpGYq/css

import Liogo1XsvgIcon from "./icons/PlasmicIcon__Liogo1Xsvg"; // plasmic-import: c_1pCl59N/icon

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  featurePost?: p.Flex<"div">;
  featurePostImg?: p.Flex<"div">;
  img?: p.Flex<"img">;
  featurePostTitle?: p.Flex<"div">;
  blogGridWrap?: p.Flex<"div">;
  blogGrid?: p.Flex<"div">;
};

export interface DefaultHomeProps {
  className?: string;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={hasVariant(globalVariants, "screen", "mobileOnly") ? true : false}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Header
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames("__wab_instance", sty.header)}
      />

      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"featurePost"}
          data-plasmic-override={overrides.featurePost}
          hasGap={
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          }
          className={classNames(defaultcss.all, sty.featurePost)}
        >
          <div
            data-plasmic-name={"featurePostImg"}
            data-plasmic-override={overrides.featurePostImg}
            className={classNames(defaultcss.all, sty.featurePostImg)}
          >
            <img
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(defaultcss.img, sty.img)}
              role={"img"}
              src={
                "https://images.unsplash.com/photo-1562447141-5ab151b2638f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1650&q=80" as const
              }
            />
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"featurePostTitle"}
            data-plasmic-override={overrides.featurePostTitle}
            hasGap={
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            }
            className={classNames(defaultcss.all, sty.featurePostTitle)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__lGeO
              )}
            >
              {"19 Realistic Habits To Improve Software Development"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___9Q0Gw
              )}
            >
              {"Simple habits to be applied from minute zero"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"blogGridWrap"}
        data-plasmic-override={overrides.blogGridWrap}
        hasGap={true}
        className={classNames(defaultcss.all, sty.blogGridWrap)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"blogGrid"}
          data-plasmic-override={overrides.blogGrid}
          hasGap={true}
          className={classNames(defaultcss.all, sty.blogGrid)}
        >
          <BlogItem
            className={classNames("__wab_instance", sty.blogItem___3Iuq1)}
          />

          <BlogItem
            className={classNames("__wab_instance", sty.blogItem__e80Ug)}
          />

          <BlogItem
            className={classNames("__wab_instance", sty.blogItem__wNmgl)}
          />

          <BlogItem
            className={classNames("__wab_instance", sty.blogItem__hffj0)}
          />

          <BlogItem
            className={classNames("__wab_instance", sty.blogItem__ufBw8)}
          />

          <BlogItem
            className={classNames("__wab_instance", sty.blogItem__rW4Ly)}
          />
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "featurePost",
    "featurePostImg",
    "img",
    "featurePostTitle",
    "blogGridWrap",
    "blogGrid"
  ],
  header: ["header"],
  featurePost: ["featurePost", "featurePostImg", "img", "featurePostTitle"],
  featurePostImg: ["featurePostImg", "img"],
  img: ["img"],
  featurePostTitle: ["featurePostTitle"],
  blogGridWrap: ["blogGridWrap", "blogGrid"],
  blogGrid: ["blogGrid"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  featurePost: "div";
  featurePostImg: "div";
  img: "img";
  featurePostTitle: "div";
  blogGridWrap: "div";
  blogGrid: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHome__VariantsArgs;
  args?: PlasmicHome__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHome__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    featurePost: makeNodeComponent("featurePost"),
    featurePostImg: makeNodeComponent("featurePostImg"),
    img: makeNodeComponent("img"),
    featurePostTitle: makeNodeComponent("featurePostTitle"),
    blogGridWrap: makeNodeComponent("blogGridWrap"),
    blogGrid: makeNodeComponent("blogGrid"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
