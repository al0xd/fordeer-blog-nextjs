// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9NGHBNkQsbfExpj8Yvxqtb
// Component: u8bhd43jsV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: p9wv0BYsrZXV/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_react_blog.module.css"; // plasmic-import: 9NGHBNkQsbfExpj8Yvxqtb/projectcss
import * as sty from "./PlasmicBlogItem.module.css"; // plasmic-import: u8bhd43jsV/css

export type PlasmicBlogItem__VariantMembers = {};

export type PlasmicBlogItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlogItem__VariantsArgs;
export const PlasmicBlogItem__VariantProps = new Array<VariantPropType>();

export type PlasmicBlogItem__ArgsType = {};
type ArgPropType = keyof PlasmicBlogItem__ArgsType;
export const PlasmicBlogItem__ArgProps = new Array<ArgPropType>();

export type PlasmicBlogItem__OverridesType = {
  root?: p.Flex<"div">;
  frame2?: p.Flex<"div">;
  img?: p.Flex<"img">;
  theDataEngineerSkillPyramid?: p.Flex<"div">;
  group2?: p.Flex<"div">;
  frame8?: p.Flex<"div">;
  screenShot20210417At3411?: p.Flex<"div">;
  group3?: p.Flex<"div">;
};

export interface DefaultBlogItemProps {
  className?: string;
}

function PlasmicBlogItem__RenderFunc(props: {
  variants: PlasmicBlogItem__VariantsArgs;
  args: PlasmicBlogItem__ArgsType;
  overrides: PlasmicBlogItem__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame2"}
        data-plasmic-override={overrides.frame2}
        hasGap={
          hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
        }
        className={classNames(defaultcss.all, sty.frame2)}
      >
        <img
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(defaultcss.img, sty.img)}
          role={"img"}
          src={
            "https://images.unsplash.com/photo-1562447141-5ab151b2638f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1650&q=80" as const
          }
        />
      </p.Stack>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.box__lnurX
        )}
      >
        {"What Skills Does a Data Engineer Need?"}
      </div>

      <div
        data-plasmic-name={"theDataEngineerSkillPyramid"}
        data-plasmic-override={overrides.theDataEngineerSkillPyramid}
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.theDataEngineerSkillPyramid
        )}
      >
        {hasVariant(globalVariants, "screen", "mobileOnly")
          ? "The data enginer skill pyramid"
          : "The data engineer skill pyramid\n"}
      </div>

      <div
        data-plasmic-name={"group2"}
        data-plasmic-override={overrides.group2}
        className={classNames(defaultcss.all, sty.group2)}
      >
        <div
          data-plasmic-name={"frame8"}
          data-plasmic-override={overrides.frame8}
          className={classNames(defaultcss.all, sty.frame8)}
        >
          <div
            data-plasmic-name={"screenShot20210417At3411"}
            data-plasmic-override={overrides.screenShot20210417At3411}
            className={classNames(defaultcss.all, sty.screenShot20210417At3411)}
          />
        </div>

        <div
          data-plasmic-name={"group3"}
          data-plasmic-override={overrides.group3}
          className={classNames(defaultcss.all, sty.group3)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__d3LQz
            )}
          >
            {"Hung Dinh"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__asLKh
            )}
          >
            {"17 Apr, 2021"}
          </div>
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame2",
    "img",
    "theDataEngineerSkillPyramid",
    "group2",
    "frame8",
    "screenShot20210417At3411",
    "group3"
  ],
  frame2: ["frame2", "img"],
  img: ["img"],
  theDataEngineerSkillPyramid: ["theDataEngineerSkillPyramid"],
  group2: ["group2", "frame8", "screenShot20210417At3411", "group3"],
  frame8: ["frame8", "screenShot20210417At3411"],
  screenShot20210417At3411: ["screenShot20210417At3411"],
  group3: ["group3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame2: "div";
  img: "img";
  theDataEngineerSkillPyramid: "div";
  group2: "div";
  frame8: "div";
  screenShot20210417At3411: "div";
  group3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlogItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicBlogItem__VariantsArgs;
  args?: PlasmicBlogItem__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicBlogItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicBlogItem__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBlogItem__ArgProps,
      internalVariantPropNames: PlasmicBlogItem__VariantProps
    });

    return PlasmicBlogItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlogItem";
  } else {
    func.displayName = `PlasmicBlogItem.${nodeName}`;
  }
  return func;
}

export const PlasmicBlogItem = Object.assign(
  // Top-level PlasmicBlogItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame2: makeNodeComponent("frame2"),
    img: makeNodeComponent("img"),
    theDataEngineerSkillPyramid: makeNodeComponent(
      "theDataEngineerSkillPyramid"
    ),
    group2: makeNodeComponent("group2"),
    frame8: makeNodeComponent("frame8"),
    screenShot20210417At3411: makeNodeComponent("screenShot20210417At3411"),
    group3: makeNodeComponent("group3"),

    // Metadata about props expected for PlasmicBlogItem
    internalVariantProps: PlasmicBlogItem__VariantProps,
    internalArgProps: PlasmicBlogItem__ArgProps
  }
);

export default PlasmicBlogItem;
/* prettier-ignore-end */
