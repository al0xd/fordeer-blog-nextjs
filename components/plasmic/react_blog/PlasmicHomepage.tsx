// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9NGHBNkQsbfExpj8Yvxqtb
// Component: bizLmKQlykgG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: t7k9WefTZ_z/component
import BlogItem from "../../BlogItem"; // plasmic-import: u8bhd43jsV/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: p9wv0BYsrZXV/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_react_blog.module.css"; // plasmic-import: 9NGHBNkQsbfExpj8Yvxqtb/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: bizLmKQlykgG/css

import Liogo1XsvgIcon from "./icons/PlasmicIcon__Liogo1Xsvg"; // plasmic-import: c_1pCl59N/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  home?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  featurePost?: p.Flex<"div">;
  featurePostImg?: p.Flex<"div">;
  img?: p.Flex<"img">;
  featurePostTitle?: p.Flex<"div">;
  blogGridWrap?: p.Flex<"div">;
  blogGrid?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
      </Head>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"home"}
            data-plasmic-override={overrides.home}
            hasGap={
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            }
            className={classNames(defaultcss.all, sty.home)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"featurePost"}
                data-plasmic-override={overrides.featurePost}
                hasGap={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                }
                className={classNames(defaultcss.all, sty.featurePost)}
              >
                <div
                  data-plasmic-name={"featurePostImg"}
                  data-plasmic-override={overrides.featurePostImg}
                  className={classNames(defaultcss.all, sty.featurePostImg)}
                >
                  <img
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(defaultcss.img, sty.img)}
                    role={"img"}
                    src={
                      "https://images.unsplash.com/photo-1562447141-5ab151b2638f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1650&q=80" as const
                    }
                  />
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"featurePostTitle"}
                  data-plasmic-override={overrides.featurePostTitle}
                  hasGap={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  }
                  className={classNames(defaultcss.all, sty.featurePostTitle)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__efk5X
                    )}
                  >
                    {"19 Realistic Habits To Improve Software Development"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__qtQmh
                    )}
                  >
                    {"Simple habits to be applied from minute zero"}
                  </div>
                </p.Stack>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"blogGridWrap"}
              data-plasmic-override={overrides.blogGridWrap}
              hasGap={true}
              className={classNames(defaultcss.all, sty.blogGridWrap)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"blogGrid"}
                data-plasmic-override={overrides.blogGrid}
                hasGap={true}
                className={classNames(defaultcss.all, sty.blogGrid)}
              >
                <BlogItem
                  className={classNames("__wab_instance", sty.blogItem__mgcMs)}
                />

                <BlogItem
                  className={classNames("__wab_instance", sty.blogItem__cnds9)}
                />

                <BlogItem
                  className={classNames("__wab_instance", sty.blogItem__y90N)}
                />

                <BlogItem
                  className={classNames("__wab_instance", sty.blogItem__r7MsA)}
                />

                <BlogItem
                  className={classNames("__wab_instance", sty.blogItem__ob2Jr)}
                />

                <BlogItem
                  className={classNames("__wab_instance", sty.blogItem__n0Wk8)}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "home",
    "header",
    "featurePost",
    "featurePostImg",
    "img",
    "featurePostTitle",
    "blogGridWrap",
    "blogGrid"
  ],
  home: [
    "home",
    "header",
    "featurePost",
    "featurePostImg",
    "img",
    "featurePostTitle",
    "blogGridWrap",
    "blogGrid"
  ],
  header: ["header"],
  featurePost: ["featurePost", "featurePostImg", "img", "featurePostTitle"],
  featurePostImg: ["featurePostImg", "img"],
  img: ["img"],
  featurePostTitle: ["featurePostTitle"],
  blogGridWrap: ["blogGridWrap", "blogGrid"],
  blogGrid: ["blogGrid"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  home: "div";
  header: typeof Header;
  featurePost: "div";
  featurePostImg: "div";
  img: "img";
  featurePostTitle: "div";
  blogGridWrap: "div";
  blogGrid: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHomepage__VariantsArgs;
  args?: PlasmicHomepage__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    home: makeNodeComponent("home"),
    header: makeNodeComponent("header"),
    featurePost: makeNodeComponent("featurePost"),
    featurePostImg: makeNodeComponent("featurePostImg"),
    img: makeNodeComponent("img"),
    featurePostTitle: makeNodeComponent("featurePostTitle"),
    blogGridWrap: makeNodeComponent("blogGridWrap"),
    blogGrid: makeNodeComponent("blogGrid"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
